import { KeyMap } from "./KeyMap";
export declare class BrowserEvent {
    private event$;
    private type$;
    private wait$;
    private dseq;
    private useq;
    private repeat$;
    key: string;
    ctrlkey: string;
    funckey: string;
    mark: boolean;
    undo: boolean;
    copy: boolean;
    paste: boolean;
    accept: boolean;
    custom: boolean;
    cancel: boolean;
    ignore: boolean;
    prevent: boolean;
    modified: boolean;
    mousedown: boolean;
    mouseinit: boolean;
    mousemark: boolean;
    printable$: boolean;
    alt: boolean;
    ctrl: boolean;
    meta: boolean;
    shift: boolean;
    private static instance;
    private static DBLClickDetection;
    private static ctrmod;
    private static detect;
    static get(): BrowserEvent;
    private constructor();
    setFocusEvent(): void;
    setKeyEvent(key: KeyMap): void;
    setEvent(event: any): void;
    get event(): any;
    reset(): void;
    get undoing(): boolean;
    get pasting(): boolean;
    get isMouseEvent(): boolean;
    get bubbleMouseEvent(): boolean;
    get isKeyEvent(): boolean;
    get isPrintableKey(): boolean;
    get onFuncKey(): boolean;
    get onScrollUp(): boolean;
    get onScrollDown(): boolean;
    get onCtrlKeyDown(): boolean;
    get type(): string;
    get waiting(): boolean;
    get basetype(): string;
    set type(type: string);
    get repeat(): boolean;
    get printable(): boolean;
    get modifier(): boolean;
    preventDefault(flag?: boolean): void;
    private KeyEvent;
    wait(): Promise<void>;
    private mouseEvent;
    clone(): BrowserEvent;
    toString(): string;
}
