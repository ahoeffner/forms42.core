import { Form } from "./Form.js";
import { Row, Status } from "./Row.js";
import { Field } from "./fields/Field.js";
import { FieldInfo } from "./fields/FieldInfo.js";
import { KeyMap } from "../control/events/KeyMap.js";
import { Block as ModelBlock } from '../model/Block.js';
import { Record, RecordState } from "../model/Record.js";
import { FieldInstance } from "./fields/FieldInstance.js";
import { EventType } from "../control/events/EventType.js";
import { BasicProperties } from "./fields/BasicProperties.js";
import { FilterIndicator } from "../application/tags/FilterIndicator.js";
export declare class Block {
    private rc$;
    private row$;
    private form$;
    private name$;
    private model$;
    private finalized$;
    private fieldnames$;
    private curinst$;
    private rows$;
    private displayed$;
    private recprops$;
    private fieldinfo$;
    constructor(form: Form, name: string);
    get row(): number;
    get rows(): number;
    get name(): string;
    get form(): Form;
    get model(): ModelBlock;
    get visited(): boolean;
    get current(): FieldInstance;
    set current(inst: FieldInstance);
    skip(): void;
    blur(ignore?: boolean): void;
    focus(ignore?: boolean): Promise<boolean>;
    isValid(field: string): boolean;
    setValid(field: string, flag: boolean): void;
    goField(field: string, clazz?: string): Promise<boolean>;
    empty(rownum?: number): boolean;
    get fieldinfo(): Map<string, FieldInfo>;
    getAllFields(field?: string): Field[];
    getCurrentFields(name?: string): Field[];
    getFields(field: string): FieldInstance[];
    getFieldById(field: string, id: string): FieldInstance;
    getInstancesByName(field: string, all?: boolean): FieldInstance[];
    getInstancesByClass(field: string, clazz?: string): FieldInstance[];
    getFieldInstances(allrows?: boolean): FieldInstance[];
    getFieldNames(): string[];
    getRecordProperties(record: Record, field: string, clazz: string): BasicProperties;
    setRecordProperties(record: Record, field?: string, clazz?: string, props?: BasicProperties): void;
    applyRecordProperties(record: Record, baserec: boolean, field?: string): void;
    setEventTransaction(event: EventType): Promise<void>;
    wait4EventTransaction(event: EventType): Promise<boolean>;
    endEventTransaction(event: EventType, apply: boolean): void;
    lock(): Promise<boolean>;
    validateDate(field: string, date: any): Promise<boolean>;
    setValidated(inst: FieldInstance): Promise<boolean>;
    validateField(inst: FieldInstance): Promise<boolean>;
    validateRow(): Promise<boolean>;
    validate(): Promise<boolean>;
    set validated(flag: boolean);
    get validated(): boolean;
    reset(): void;
    cancel(): void;
    clear(props: boolean, rewind: boolean, fields?: boolean): void;
    addInstance(inst: FieldInstance): void;
    onEdit(inst: FieldInstance): Promise<boolean>;
    goRow(rownum: number): Promise<boolean>;
    prevrecord(): Promise<boolean>;
    nextrecord(): Promise<boolean>;
    navigateRow(key: KeyMap, inst: FieldInstance): Promise<boolean>;
    navigateBlock(key: KeyMap, inst: FieldInstance): Promise<boolean>;
    offset(inst: FieldInstance): number;
    move(delta: number): number;
    getCurrentRow(): Row;
    setCurrentRow(rownum: number, newqry: boolean): Promise<boolean>;
    addRow(row: Row): void;
    getRow(rownum: number): Row;
    displayed(record: Record): Row;
    getRecord(row?: number): Record;
    setAttributes(record?: Record): void;
    display(rownum: number, record: Record): void;
    lockUnused(): void;
    refresh(record: Record): Promise<boolean>;
    swapInstances(inst1: FieldInstance, inst2: FieldInstance): void;
    openrow(): void;
    private displaycurrent;
    private setIndicators;
    setFilterIndicators(indicators: FilterIndicator[], flag: boolean): void;
    private scroll;
    findFirst(record: Record): FieldInstance;
    hasQueryableFields(): boolean;
    hasInsertableFields(): boolean;
    findFirstEditable(record: Record): FieldInstance;
    getQBEInstance(inst: FieldInstance): FieldInstance;
    getPreviousInstance(inst: FieldInstance): FieldInstance;
    finalize(): void;
    disableQuery(): void;
    disableInsert(): void;
    disableUpdate(): void;
    enableUpdate(): void;
    distribute(field: Field, value: any, dirty: boolean): void;
    convert(status: RecordState): Status;
    linkModel(): void;
    private fireFieldEvent;
    private fireBlockEvent;
}
