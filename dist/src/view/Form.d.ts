import { Block } from './Block.js';
import { Record } from '../model/Record.js';
import { Form as ModelForm } from '../model/Form.js';
import { Block as ModelBlock } from '../model/Block.js';
import { Form as InterfaceForm } from '../public/Form.js';
import { FieldInstance } from './fields/FieldInstance.js';
import { Canvas } from '../application/interfaces/Canvas.js';
import { KeyMap } from '../control/events/KeyMap.js';
import { RowIndicator } from '../application/tags/RowIndicator.js';
import { MouseMap } from '../control/events/MouseMap.js';
import { FilterIndicator } from '../application/tags/FilterIndicator.js';
export declare class Form implements EventListenerObject {
    static current(): Form;
    static previous(): Form;
    private focus$;
    private canvas$;
    private modfrm$;
    private parent$;
    private curinst$;
    private lastinst$;
    private blocks$;
    private indicators;
    private fltindicators;
    constructor(parent: InterfaceForm);
    get name(): string;
    get parent(): InterfaceForm;
    get canvas(): Canvas;
    set canvas(canvas: Canvas);
    get model(): ModelForm;
    get block(): Block;
    get current(): FieldInstance;
    set current(inst: FieldInstance);
    clear(flush: boolean): Promise<boolean>;
    getBlock(name: string): Block;
    getBlocks(): Block[];
    addBlock(block: Block): void;
    getIndicators(block: string): RowIndicator[];
    addIndicator(ind: RowIndicator): void;
    setFilterIndicator(block: ModelBlock, flag: boolean): void;
    addFilterIndicator(ind: FilterIndicator): void;
    skip(): void;
    blur(ignore?: boolean, stay?: boolean): void;
    focus(): Promise<boolean>;
    dragfields(header: HTMLElement): void;
    validate(): Promise<boolean>;
    validated(): boolean;
    onCanvasFocus(): Promise<boolean>;
    enter(inst: FieldInstance): Promise<boolean>;
    checkLeave(curr: Form): Promise<boolean>;
    leave(inst: FieldInstance): Promise<boolean>;
    enterForm(form: Form): Promise<boolean>;
    enterBlock(block: Block, offset: number): Promise<boolean>;
    enterRecord(block: Block, offset: number): Promise<boolean>;
    onRecord(block: Block): Promise<boolean>;
    onCreateRecord(block: Block, record: Record): Promise<boolean>;
    enterField(inst: FieldInstance, offset: number, force?: boolean): Promise<boolean>;
    leaveForm(form: Form): Promise<boolean>;
    leaveBlock(block: Block, offset?: number): Promise<boolean>;
    leaveRecord(block: Block, offset?: number): Promise<boolean>;
    leaveField(inst?: FieldInstance, offset?: number, force?: boolean): Promise<boolean>;
    sendkey(key: KeyMap, block?: string, field?: string, clazz?: string): boolean;
    keyhandler(key: KeyMap, inst?: FieldInstance): Promise<boolean>;
    mousehandler(mevent: MouseMap, event: Event, inst?: FieldInstance): Promise<boolean>;
    showDatePicker(block: string, field: string, row?: number): Promise<boolean>;
    showListOfValues(block: string, field: string, row?: number, force?: boolean): Promise<boolean>;
    navigateForm(key: KeyMap, inst: FieldInstance): Promise<boolean>;
    private setEventTransaction;
    private endEventTransaction;
    private event;
    handleEvent(event: Event): Promise<void>;
    rehash(block?: string): void;
    private getElements;
    setURL(close?: boolean): void;
    finalize(): Promise<void>;
    private fireFormEvent;
    private fireBlockEvent;
    private fireFieldEvent;
    private addEvents;
}
