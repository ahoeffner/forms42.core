import { DataType } from "./DataType.js";
import { DataMapper } from "./DataMapper.js";
import { Class } from "../../public/Class.js";
import { ListOfValues } from "../../public/ListOfValues.js";
import { Formatter, SimpleFormatter } from "./interfaces/Formatter.js";
export interface Style {
    style: string;
    value: string;
}
export declare class BasicProperties {
    protected tag$: string;
    protected styles$: Style[];
    protected classes$: string[];
    protected mapper$: DataMapper;
    protected formatter$: Formatter;
    protected listofvalues$: ListOfValues;
    protected simpleformatter$: SimpleFormatter;
    protected attribs$: Map<string, string>;
    protected hidden$: boolean;
    protected enabled$: boolean;
    protected advquery$: boolean;
    protected derived$: boolean;
    protected readonly$: boolean;
    protected required$: boolean;
    protected value$: string;
    protected values$: Map<any, any>;
    protected handled$: string[];
    protected structured$: string[];
    get tag(): string;
    set tag(tag: string);
    setTag(tag: string): BasicProperties;
    get enabled(): boolean;
    set enabled(flag: boolean);
    setEnabled(flag: boolean): BasicProperties;
    get readonly(): boolean;
    set readonly(flag: boolean);
    setReadOnly(flag: boolean): BasicProperties;
    get required(): boolean;
    set required(flag: boolean);
    get derived(): boolean;
    set derived(flag: boolean);
    get advquery(): boolean;
    set advquery(flag: boolean);
    setRequired(flag: boolean): BasicProperties;
    setDerived(flag: boolean): BasicProperties;
    setAdvancedQuery(flag: boolean): BasicProperties;
    get hidden(): boolean;
    set hidden(flag: boolean);
    setHidden(flag: boolean): BasicProperties;
    get styleElements(): Style[];
    getStyle(style: string): string;
    getStyles(): Style[];
    setType(type: DataType): BasicProperties;
    get style(): string;
    set styles(styles: string | Style[]);
    setStyles(styles: string | Style[]): BasicProperties;
    setStyle(style: string, value: string): BasicProperties;
    removeStyle(style: string): BasicProperties;
    setClass(clazz: string): BasicProperties;
    setClasses(classes: string | string[]): BasicProperties;
    getClasses(): string[];
    hasClass(clazz: string): boolean;
    removeClass(clazz: any): BasicProperties;
    getAttributes(): Map<string, string>;
    setAttributes(attrs: Map<string, string>): BasicProperties;
    hasAttribute(attr: string): boolean;
    getAttribute(attr: string): string;
    setAttribute(attr: string, value?: any): BasicProperties;
    removeAttribute(attr: string): BasicProperties;
    get value(): string;
    set value(value: string);
    setValue(value: string): BasicProperties;
    get validValues(): Map<any, any>;
    set validValues(values: string[] | Set<any> | Map<any, any>);
    setValidValues(values: string[] | Set<any> | Map<any, any>): BasicProperties;
    getValidValues(): Map<any, any>;
    get mapper(): DataMapper;
    set mapper(mapper: DataMapper);
    setMapper(mapper: Class<DataMapper> | DataMapper | string): BasicProperties;
    get formatter(): Formatter;
    set formatter(formatter: Formatter);
    setFormatter(formatter: Class<Formatter> | Formatter | string): BasicProperties;
    get simpleformatter(): SimpleFormatter;
    set simpleformatter(formatter: SimpleFormatter);
    setSimpleFormatter(formatter: Class<SimpleFormatter> | SimpleFormatter | string): BasicProperties;
    get listofvalues(): ListOfValues;
    set listofvalues(listofvalues: ListOfValues);
    setListOfValues(listofvalues: Class<ListOfValues> | ListOfValues | string): BasicProperties;
    private setFormatterType;
}
