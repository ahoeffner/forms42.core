import { Field } from "./Field.js";
import { Status } from "../Row.js";
import { DataType } from "./DataType.js";
import { Form } from "../../public/Form.js";
import { FieldProperties } from "./FieldProperties.js";
import { FieldEventHandler } from "./interfaces/FieldEventHandler.js";
import { FieldImplementation, FieldState } from "./interfaces/FieldImplementation.js";
import { BrowserEvent as Event } from "../../control/events/BrowserEvent.js";
export declare class FieldInstance implements FieldEventHandler {
    private form$;
    private field$;
    private ignore$;
    private element$;
    private impl;
    private properties$;
    private defproperties$;
    private insproperties$;
    private qbeproperties$;
    private clazz;
    constructor(form: Form, tag: HTMLElement);
    finalize(): void;
    resetProperties(): void;
    setDefaultProperties(props: FieldProperties, status: Status): void;
    applyProperties(props: FieldProperties): void;
    private updateField;
    private changeFieldType;
    get row(): number;
    get form(): Form;
    get id(): string;
    get name(): string;
    get block(): string;
    get field(): Field;
    get element(): HTMLElement;
    get datatype(): DataType;
    set datatype(type: DataType);
    setValidated(): void;
    get implementation(): FieldImplementation;
    get ignore(): string;
    set ignore(value: string);
    get valid(): boolean;
    set valid(flag: boolean);
    get properties(): FieldProperties;
    get defaultProperties(): FieldProperties;
    get qbeProperties(): FieldProperties;
    get updateProperties(): FieldProperties;
    get insertProperties(): FieldProperties;
    clear(): void;
    getValue(): any;
    setValue(value: any): boolean;
    getIntermediateValue(): string;
    setIntermediateValue(value: string): void;
    skip(): void;
    blur(ignore?: boolean): void;
    focus(ignore?: boolean): void;
    hasFocus(): boolean;
    focusable(status?: Status): boolean;
    editable(status?: Status): boolean;
    setFieldState(state: FieldState): void;
    handleEvent(event: Event): Promise<void>;
    toString(): string;
}
