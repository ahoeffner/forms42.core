import { Row } from "../Row.js";
import { Block } from "../Block.js";
import { FieldInstance } from "./FieldInstance.js";
import { Form as Interface } from "../../public/Form.js";
import { Block as ModelBlock } from "../../model/Block.js";
import { BrowserEvent } from "../../control/events/BrowserEvent.js";
export declare class Field {
    private row$;
    private value$;
    private name$;
    private block$;
    private valid$;
    private dirty$;
    private validated$;
    private instance$;
    private instances$;
    static create(form: Interface, block: string, field: string, rownum: number): Field;
    constructor(block: Block, row: Row, name: string);
    get row(): Row;
    get name(): string;
    get block(): Block;
    get dirty(): boolean;
    set dirty(flag: boolean);
    get validated(): boolean;
    set validated(validated: boolean);
    get mdlblock(): ModelBlock;
    get valid(): boolean;
    set valid(flag: boolean);
    clear(): void;
    setInstanceValidity(flag: boolean): void;
    addInstance(instance: FieldInstance): void;
    getInstance(entry: number): FieldInstance;
    getInstances(): FieldInstance[];
    getInstanceEntry(inst: FieldInstance): number;
    getInstancesById(id: string): FieldInstance[];
    getInstancesByClass(clazz: string): FieldInstance[];
    setValue(value: any): void;
    getValue(): any;
    handleEvent(inst: FieldInstance, brwevent: BrowserEvent): Promise<void>;
    performEvent(inst: FieldInstance, brwevent: BrowserEvent): Promise<void>;
    distribute(inst: FieldInstance, value: any, dirty: boolean): void;
    validate(inst: FieldInstance): Promise<boolean>;
    toString(): string;
}
