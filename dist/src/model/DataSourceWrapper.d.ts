import { Record } from "./Record.js";
import { FilterStructure } from "./FilterStructure.js";
import { Block as ModelBlock } from "../model/Block.js";
import { DataSource } from "./interfaces/DataSource.js";
export declare class DataSourceWrapper {
    block?: ModelBlock;
    private eof$;
    private cache$;
    private hwm$;
    private columns$;
    private source$;
    private modified$;
    constructor(block?: ModelBlock);
    get source(): DataSource;
    set source(source: DataSource);
    get columns(): string[];
    set columns(columns: string[]);
    getRecords(): number;
    get dirty(): boolean;
    set dirty(flag: boolean);
    get transactional(): boolean;
    clear(flush: boolean): Promise<boolean>;
    setSynchronized(): void;
    getDirtyCount(): number;
    getPendingCount(): number;
    undo(): Promise<Record[]>;
    flush(): Promise<boolean>;
    getValue(record: number, field: string): any;
    setValue(record: number, field: string, value: any): boolean;
    locked(record: Record): boolean;
    lock(record: Record, force: boolean): Promise<boolean>;
    refresh(record: Record): Promise<void>;
    modified(record: Record, deleted: boolean): Promise<boolean>;
    create(pos: number, before?: boolean): Record;
    insert(record: Record): Promise<boolean>;
    update(record: Record): Promise<boolean>;
    delete(record: Record): Promise<boolean>;
    getRecord(record: number): Record;
    query(filter?: FilterStructure): Promise<boolean>;
    fetch(): Promise<Record>;
    prefetch(record: number, records: number): Promise<number>;
    indexOf(column: string): number;
    copy(header?: boolean, all?: boolean): Promise<any[][]>;
    index(record: Record): number;
    private linkToMasters;
    dump(): void;
}
