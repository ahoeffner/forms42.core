import { Form } from '../public/Form.js';
import { Class } from '../public/Class.js';
import { Block } from '../public/Block.js';
import { Key } from '../model/relations/Key.js';
import { Form as ViewForm } from '../view/Form.js';
import { Form as ModelForm } from '../model/Form.js';
import { Block as ViewBlock } from '../view/Block.js';
import { Connection } from '../database/Connection.js';
import { Block as ModelBlock } from '../model/Block.js';
import { ListOfValues } from '../public/ListOfValues.js';
import { Relation } from '../model/relations/Relation.js';
import { Form as InternalForm } from '../internal/Form.js';
import { DateConstraint } from '../public/DateConstraint.js';
export declare class FormBacking {
    form: Form;
    private static prev;
    private static form;
    private static nonav;
    private static vforms;
    private static mforms;
    private static bdata;
    static createForm(form: Class<Form | InternalForm> | string, page: HTMLElement, parameters?: Map<any, any>): Promise<Form>;
    static showform(form: Class<Form | InternalForm> | string, parent: Form | InternalForm, parameters?: Map<any, any>, container?: HTMLElement): Promise<Form>;
    static getCurrentForm(): Form;
    static getPreviousForm(): Form;
    static getRunningForms(clazz?: Class<Form | InternalForm>): Form[];
    static getChildForms(form: Form, clazz?: Class<Form | InternalForm>): Form[];
    static getCurrentViewForm(): ViewForm;
    static getPreviousViewForm(): ViewForm;
    static getCurrentModelForm(): ModelForm;
    static getPreviousModelForm(): ModelForm;
    static setCurrentForm(form: Form | ViewForm | ModelForm): void;
    static getBacking(form: Form): FormBacking;
    static setBacking(form: Form): FormBacking;
    static removeBacking(form: Form): void;
    static setURLNavigable(name: string, nav: boolean): void;
    static getURLNavigable(name: string): boolean;
    static cleanup(form: Form): void;
    static getViewForm(form: Form, create?: boolean): ViewForm;
    static setViewForm(form: Form, view: ViewForm): void;
    static getModelForm(form: Form, create?: boolean): ModelForm;
    static setModelForm(form: Form, model: ModelForm): void;
    static getViewBlock(block: Block | ModelBlock, create?: boolean): ViewBlock;
    static getModelBlock(block: Block | ViewBlock, create?: boolean): ModelBlock;
    static hasTransactions(connection?: Connection): boolean;
    static commit(): Promise<boolean>;
    static rollback(): Promise<boolean>;
    private parent$;
    private links$;
    private page$;
    private listeners$;
    private autoblocks$;
    private haschild$;
    private blocks$;
    private lovs$;
    private datectr$;
    constructor(form: Form);
    get page(): HTMLElement;
    set page(page: HTMLElement);
    get parent(): Form;
    set parent(form: Form);
    get blocks(): Map<string, Block>;
    get wasCalled(): boolean;
    get parentForm(): Form;
    get hasModalChild(): boolean;
    set hasModalChild(flag: boolean);
    get listeners(): object[];
    set listeners(listeners: object[]);
    getListOfValues(block: string, field: string): ListOfValues;
    removeListOfValues(block: string, field: string): void;
    setListOfValues(block: string, field: string, lov: ListOfValues): void;
    getDateConstraint(block: string, field: string): DateConstraint;
    setDateConstraint(block: string, field: string, constr: DateConstraint): void;
    setAutoGenerated(block: Block): void;
    get links(): Relation[];
    setLink(master: Key, detail: Key, orphanQueries: boolean): void;
    clearAutoGenerated(): void;
    hasEventListeners(): boolean;
    removeEventListener(handle: object): void;
    removeAllEventListeners(): void;
}
